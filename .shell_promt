#!/bin/bash

# Normal Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

NC="\e[m"               # Color Reset

ALERT=${BWhite}${On_Red} # Bold White on red background

cUser='\[\033[00;38;5;98m\]'
cHost='\[\033[00;38;5;98m\]'
cPwd='\[\033[01;34m\]'
cDate='\e[1;30m'
cDivider='\[\033[00;38;5;37m\]' 

#------------------------------------------------------------------------

GIT_BRANCH_SYMBOL='⑂ '
GIT_BRANCH_CHANGED_SYMBOL='+'
GIT_NEED_PUSH_SYMBOL='⇡'
GIT_NEED_PULL_SYMBOL='⇣'

git_branch() 
{
	[ -z "$(which git)" ] && echo "no git" && return # no git command found

	# try to get current branch or or SHA1 hash for detached head
	local branch="$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)"
	[ -z "$branch" ] && echo "no git" && return # not a git branch

	local marks

	# branch is modified
	[ -n "$(git status --porcelain)" ] && marks+=" $GIT_BRANCH_CHANGED_SYMBOL"

	# check if local branch is ahead/behind of remote and by how many commits
	# Shamelessly copied from http://stackoverflow.com/questions/2969214/git-programmatically-know-by-how-much-the-branch-is-ahead-behind-a-remote-branc
	local remote="$(git config branch.$branch.remote)"
	local remote_ref="$(git config branch.$branch.merge)"
	local remote_branch="${remote_ref##refs/heads/}"
	local tracking_branch="refs/remotes/$remote/$remote_branch"
	if [ -n "$remote" ]; then
		local pushN="$(git rev-list $tracking_branch..HEAD|wc -l|tr -d ' ')"
		local pullN="$(git rev-list HEAD..$tracking_branch|wc -l|tr -d ' ')"
		[ "$pushN" != "0" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$pushN"
		[ "$pullN" != "0" ] && marks+=" $GIT_NEED_PULL_SYMBOL$pullN"
	fi

	# print the git branch segment without a trailing newline
	printf "$GIT_BRANCH_SYMBOL$branch$marks"
}

#------------------------------------------------------------------------

get_fill_size()
{
	local fillsize
	local promtsize
	local width

	let promptsize=$(echo -n "┌─|$user@$host:${newPWD}||${gitbranch}|${load})|${datenow}|${jobsnow}|─┐" \
		| wc -m | tr -d " ")

	width=$(tput cols)

	if [ `id -u` -eq 0 ]
	then
		let fillsize=${width}-${promptsize}+1
	else
		let fillsize=${width}-${promptsize}-1
	fi

	echo $fillsize
}

# Code for a cool Prompt
pre_prompt()
{
	exitStatus="$?"
	newPWD="${PWD}"
	user="$(whoami)"
	host=$(echo -n $HOSTNAME | sed -e "s/[\.].*//")
	datenow="$(date "+%H:%M")"
	load="$(load_show)"
	jobsnow="$(jobs_show)"
	gitbranch="$(git_branch)"

	fillsize=$(get_fill_size)
	fill=""

	while [ "$fillsize" -gt "0" ]
	do
		fill="${fill}─"
		let fillsize=${fillsize}-1
	done

	if [ "$fillsize" -lt "0" ]
	then
		let cutt=3-${fillsize}
		newPWD="...$(echo -n $PWD | sed -e "s/\(^.\{$cutt\}\)\(.*\)/\2/")"
	fi

	if [ "${exitStatus}" -eq 0 ]
	then 
		promt_color=$'\[\033[01;32m\]'
	else
		promt_color=$'\[\e[31m\]'
	fi
	
	fillsize=$(get_fill_size)

	if [ "$fillsize" -lt "0" ]
	then
		PS1="${promt_color}▶ ${cBorder}"
		return
	fi

	PS1="${cBorder}┌─|${cUser}${user}${cDivider}@\
${cHost}${host}${cBorder}:${cPwd}\$newPWD${cBorder}|─\${fill}─|\
${gitbranch}|\$(load_color)${load}${cBorder}|${cDate}${datenow}\
${cBorder}|\$(job_color)${jobsnow}${cBorder}\
${cBorder}|─┐\n${cBorder}└${promt_color}$ ${cBorder}"
}

NCPU=$(grep -c 'processor' /proc/cpuinfo)    # Number of CPUs
SLOAD=$(( 100*${NCPU} ))        # Small load
MLOAD=$(( 200*${NCPU} ))        # Medium load
XLOAD=$(( 400*${NCPU} ))        # Xlarge load

# Returns system load as percentage, i.e., '40' rather than '0.40)'.
function load()
{
    local SYSLOAD=$(cut -d " " -f1 /proc/loadavg | tr -d '.')
    # System load of the current host.
    echo $((10#$SYSLOAD))       # Convert to decimal.
}

# Returns a color indicating system load.
function load_color()
{
    local SYSLOAD=$(load)
    if [ ${SYSLOAD} -gt ${XLOAD} ]; then
        echo -en ${ALERT}
    elif [ ${SYSLOAD} -gt ${MLOAD} ]; then
        echo -en ${Red}
    elif [ ${SYSLOAD} -gt ${SLOAD} ]; then
        echo -en ${BRed}
    else
        echo -en ${Green}
    fi
}

# Returns a color according to running/suspended jobs.
function job_color()
{
    if [ $(jobs -s | wc -l) -gt "0" ]; then
        echo -en ${BRed}
    elif [ $(jobs -r | wc -l) -gt "0" ] ; then
        echo -en ${BCyan}
    fi
}

function jobs_show()
{
	njobs=$(jobs | wc -l)
	echo $njobs
}

function load_show()
{
	local SYSLOAD=$(cut -d " " --fields=1,2,3 /proc/loadavg)
	echo $SYSLOAD
}

# Set prompt colour
if [ `id -u` -eq 0 ]
then
	cText="${LightRed}"
	cBorder="${Red}"
else
	cText="${LightCyan}"
	cBorder="\[\033[00m\]"
fi

PROMPT_COMMAND=pre_prompt
